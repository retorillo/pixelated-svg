'use strict';
const should = require('should');
const core = require('../lib/core.js');

const testcases = [
  {
    bin: [ 1 ],
    width: 1,
    contours: [[0, 0, 1], [1, 0, 1], [1, 1, 1], [0, 1, 1]],
    polygons: [[[0, 0], [1, 0], [1, 1], [0, 1]]],
  },
  {
    bin: [ 1, 1, 1, 1 ],
    width: 2,
    contours: [[0, 0, 1], [2, 0, 1], [0, 2, 1], [2, 2, 1]],
    polygons: [[[0, 0], [2, 0], [2, 2], [0, 2]]],
  },
  {
    bin: [ 1, 1, 1,
           1, 0, 1,
           1, 1, 1, ],
    width: 3,
    contours: [
      [0, 0, 1], [3, 0, 1], [1, 1, 0], [1, 1, 1],
      [2, 1, 0], [2, 1, 1], [2, 2, 0], [2, 2, 1],
      [1, 2, 0], [1, 2, 1], [0, 3, 1], [3, 3, 1]],
    polygons: [ [[0, 0], [3, 0], [3, 3], [0, 3]],
                [[1, 1], [2, 1], [2, 2], [1, 2]].reverse(), ]
  },
  {
    bin: [ 1, 1, 1,
           1, 0, 1,
           1, 0, 1, ],
    width: 3,
    contours: [
        [0, 0, 1], [3, 0, 1], [1, 1, 0], [1, 1, 1],
        [2, 1, 0], [2, 1, 1], [1, 3, 1], [0, 3, 1],
        [3, 3, 1], [2, 3, 1],
    ],
    polygons: [ [[0, 0], [3, 0], [3, 3], [2, 3], [2, 1], [1, 1], [1, 3], [0, 3]], ]
  },
  {
    bin: [ 1, 0, 0,
           0, 1, 0,
           0, 0, 1, ],
    width: 3,
    contours: [
      [ 0, 0, 1 ], [ 1, 0, 1 ], [ 1, 1, 1 ], [ 0, 1, 1 ], [ 1, 1, 0 ],
      [ 1, 1, 1 ], [ 1, 1, 0 ], [ 1, 1, 1 ], [ 1, 1, 1 ], [ 2, 1, 1 ],
      [ 2, 2, 1 ], [ 1, 2, 1 ], [ 2, 2, 0 ], [ 2, 2, 1 ], [ 2, 2, 0 ],
      [ 2, 2, 1 ], [ 2, 2, 1 ], [ 3, 2, 1 ], [ 3, 3, 1 ], [ 2, 3, 1 ]
    ],
    polygons: [[
      [ 0, 0 ], [ 1, 0 ], [ 1, 1 ], [ 2, 1 ], [ 2, 2 ], [ 3, 2 ],
      [ 3, 3 ], [ 2, 3 ], [ 2, 2 ], [ 1, 2 ], [ 1, 1 ], [ 0, 1 ]
    ]]
  },
  {
    bin: [ 1, 0, 1,
           1, 0, 1,
           1, 0, 1, ],
    width: 3,
    contours: [
      [ 0, 0, 1 ], [ 1, 0, 1 ], [ 2, 0, 1 ], [ 3, 0, 1 ], [ 1, 3, 1 ],
      [ 0, 3, 1 ], [ 3, 3, 1 ], [ 2, 3, 1 ]
    ],
    polygons: [
      [ [ 0, 0 ], [ 1, 0 ], [ 1, 3 ], [ 0, 3 ] ],
      [ [ 2, 0 ], [ 3, 0 ], [ 3, 3 ], [ 2, 3 ] ]
    ]
  },
  {
    bin: [ 0, 1,
           1, 0, ],
    width: 2,
    contours: [
      [ 1, 1, 0 ], [ 1, 1, 1 ], [ 1, 0, 1 ], [ 2, 0, 1 ],
      [ 2, 1, 1 ], [ 1, 1, 1 ], [ 0, 1, 1 ], [ 1, 1, 1 ],
      [ 1, 2, 1 ], [ 0, 2, 1 ], [ 1, 1, 0 ], [ 1, 1, 1 ]
    ],
    polygons: [ [
      [ 1, 0 ], [ 2, 0 ], [ 2, 1 ], [ 1, 1 ], [ 1, 2 ],
      [ 0, 2 ], [ 0, 1 ], [ 1, 1 ]
     ] ]
  },
  {
    bin: [ 1, 1, 1, 1, 1,
           1, 0, 1, 0, 1,
           1, 1, 1, 1, 1, ],
    width: 5,
    contours: [
      [ 0, 0, 1 ], [ 5, 0, 1 ], [ 1, 1, 0 ], [ 1, 1, 1 ],
      [ 2, 1, 0 ], [ 2, 1, 1 ], [ 2, 2, 0 ], [ 2, 2, 1 ],
      [ 1, 2, 0 ], [ 1, 2, 1 ], [ 3, 1, 0 ], [ 3, 1, 1 ],
      [ 4, 1, 0 ], [ 4, 1, 1 ], [ 4, 2, 0 ], [ 4, 2, 1 ],
      [ 3, 2, 0 ], [ 3, 2, 1 ], [ 0, 3, 1 ], [ 5, 3, 1 ]
    ],
    polygons: [
       [  [ 0, 0 ],  [ 5, 0 ],  [ 5, 3 ],  [ 0, 3 ] ],
       [  [ 1, 2 ],  [ 2, 2 ],  [ 2, 1 ],  [ 1, 1 ] ],
       [  [ 3, 2 ],  [ 4, 2 ],  [ 4, 1 ],  [ 3, 1 ] ]
     ]
  },
  {
    bin: [ 1, 1, 1, 1, 1,
           0, 0, 1, 0, 1,
           1, 1, 1, 1, 1, ],
    width: 5,
    contours: [
     [ 0, 0, 1 ], [ 0, 1, 1 ], [ 5, 0, 1 ], [ 2, 1, 0 ],
     [ 2, 1, 1 ], [ 2, 2, 0 ], [ 2, 2, 1 ], [ 3, 1, 0 ],
     [ 3, 1, 1 ], [ 4, 1, 0 ], [ 4, 1, 1 ], [ 4, 2, 0 ],
     [ 4, 2, 1 ], [ 3, 2, 0 ], [ 3, 2, 1 ], [ 0, 2, 1 ],
     [ 0, 3, 1 ], [ 5, 3, 1 ]
    ],
    polygons: [
       [ [ 0, 0 ], [ 5, 0 ], [ 5, 3 ], [ 0, 3 ],
         [ 0, 2 ], [ 2, 2 ], [ 2, 1 ], [ 0, 1 ] ],
      [  [ 3, 2 ],  [ 4, 2 ],  [ 4, 1 ],  [ 3, 1 ] ]
   ]
  },
  {
    bin: [ 1, 1, 1, 1, 1,
           1, 0, 1, 0, 1,
           1, 1, 0, 1, 1, ],
    width: 5,
    tag: 'foo',
    break: true,
    contours: [
       [ 0, 0, 1 ], [ 5, 0, 1 ], [ 1, 1, 0 ], [ 1, 1, 1 ],
       [ 2, 1, 0 ], [ 2, 1, 1 ], [ 2, 2, 0 ], [ 2, 2, 1 ],
       [ 1, 2, 0 ], [ 1, 2, 1 ], [ 3, 2, 1 ], [ 2, 2, 1 ],
       [ 3, 1, 0 ], [ 3, 1, 1 ], [ 4, 1, 0 ], [ 4, 1, 1 ],
       [ 4, 2, 0 ], [ 4, 2, 1 ], [ 3, 2, 0 ], [ 3, 2, 1 ],
       [ 0, 3, 1 ], [ 2, 2, 1 ], [ 2, 3, 1 ], [ 2, 2, 0 ],
       [ 2, 2, 1 ], [ 3, 2, 0 ], [ 3, 2, 1 ], [ 3, 2, 1 ],
       [ 3, 3, 1 ], [ 5, 3, 1 ]
    ],
    polygons: [
       [
         [ 0, 0 ],
         [ 5, 0 ],
         [ 5, 3 ],
         [ 3, 3 ],
         [ 3, 2 ],
         [ 2, 2 ],
         [ 2, 3 ],
         [ 0, 3 ]
      ],
       [  [ 1, 2 ],  [ 2, 2 ],  [ 2, 1 ],  [ 1, 1 ] ],
       [  [ 3, 2 ],  [ 4, 2 ],  [ 4, 1 ],  [ 3, 1 ] ]
   ]
  },
];

describe('Binaries (Black / White)', function() {
  for (let t of testcases) {
    let desc = `${JSON.stringify(t.bin)}${t.tag}`
    if (!t.height)
      t.height = t.bin.length / t.width;
    describe(desc, function() {
      it(`contours should be: ${JSON.stringify(t.contours)}`, function() {
        if (t.break) debugger;
        should(core.contourPointsFromBinaries(t.bin, t.width, t.height))
          .eql(t.contours);
      });
      it(`polygons should be: ${JSON.stringify(t.polygons)}`, function() {
        if(t.break) debugger;
        should(core.polygonsFromBinary(t.bin, t.width, t.height))
          .eql(t.polygons);
      });
    });
  }
});
